#import "LoopMeResources.h"

NSString * const kLoopMeResourceBase64Thumb = @"iVBORw0KGgoAAAANSUhEUgAAABUAAAAVCAYAAACpF6WWAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwYAAABy2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBJbWFnZVJlYWR5PC94bXA6Q3JlYXRvclRvb2w+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgqyI37xAAAAG0lEQVQ4EWNgGAWjITAaAqMhMBoCoyEwgkIAAAb5AAF4XTsKAAAAAElFTkSuQmCC";
NSString * const kLoopMeResourceBase64ShaderV = @"Ly8KLy8gIFNoYWRlci52c2gKLy8KLy8gIENyZWF0ZWQgYnkg76O/IG9uIDExLzgvMTUuCi8vICBDb3B5cmlnaHQgwqkgMjAxNSBIYW50b24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vCgphdHRyaWJ1dGUgdmVjNCBwb3NpdGlvbjsKYXR0cmlidXRlIHZlYzIgdGV4Q29vcmQ7Cgp2YXJ5aW5nIHZlYzIgdl90ZXh0dXJlQ29vcmRpbmF0ZTsKCnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4OwoKdm9pZCBtYWluKCkgewogIHZfdGV4dHVyZUNvb3JkaW5hdGUgPSB0ZXhDb29yZDsKICBnbF9Qb3NpdGlvbiA9IG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggKiBwb3NpdGlvbjsKfQo=";
NSString * const kLoopMeResourceBase64ShaderF = @"Ly8KLy8gIFNoYWRlci5mc2gKLy8KLy8gIENyZWF0ZWQgYnkg76O/IG9uIDExLzgvMTUuCi8vICBDb3B5cmlnaHQgwqkgMjAxNSBIYW50b24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vCgovL3ZhcnlpbmcgbG93cCB2ZWM0IGNvbG9yVmFyeWluZzsKCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0Owp1bmlmb3JtIHNhbXBsZXIyRCBTYW1wbGVyWTsKdW5pZm9ybSBzYW1wbGVyMkQgU2FtcGxlclVWOwp2YXJ5aW5nIG1lZGl1bXAgdmVjMiB2X3RleHR1cmVDb29yZGluYXRlOwoKdW5pZm9ybSBtYXQzIGNvbG9yQ29udmVyc2lvbk1hdHJpeDsKCnZvaWQgbWFpbigpIHsKICBtZWRpdW1wIHZlYzMgeXV2OwogIGxvd3AgdmVjMyByZ2I7CiAgCiAgLy8gU3VidHJhY3QgY29uc3RhbnRzIHRvIG1hcCB0aGUgdmlkZW8gcmFuZ2Ugc3RhcnQgYXQgMAogIHl1di54ID0gKHRleHR1cmUyRChTYW1wbGVyWSwgdl90ZXh0dXJlQ29vcmRpbmF0ZSkuciAtICgxNi4wLzI1NS4wKSkqIDEuMDsKICB5dXYueXogPSAodGV4dHVyZTJEKFNhbXBsZXJVViwgdl90ZXh0dXJlQ29vcmRpbmF0ZSkucmcgLSB2ZWMyKDAuNSwgMC41KSkqIDEuMDsKICAKICByZ2IgPSBjb2xvckNvbnZlcnNpb25NYXRyaXggKiB5dXY7CiAgCiAgZ2xfRnJhZ0NvbG9yID0gdmVjNChyZ2IsMSk7Cn0=";
NSString * const kLoopMeResourceBase64Mraid = @"";
NSString * const kLoopMeResourceBase64Vast4 = @"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgIHZhciBzY3JpcHRzQXJyYXkgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTQ1JJUFRQTEFDRV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgIAogICAgICAgICAgICAgc2NyaXB0c0FycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFNjcmlwdChlbGVtLCB1bmljb3JuU2NyaXB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgCiAgICAgICAgICAgICBmdW5jdGlvbiB1bmljb3JuU2NyaXB0KHBhdGgsIHJlcykgewogICAgICAgICAgICAgKHJlcyA9PT0gJ29rJykgPyB3aW5kb3cubG9jYXRpb24gPSAibG1zY3JpcHQ6Ly9sb2FkZWQiCiAgICAgICAgICAgICA6IHdpbmRvdy5sb2NhdGlvbiA9ICJsbXNjcmlwdDovL25vdGxvYWRlZCIKICAgICAgICAgICAgIH0KICAgICAgICAgICAgIAogICAgICAgICAgICAgZnVuY3Rpb24gbG9hZFNjcmlwdChwYXRoLCBjYWxsYmFjaykgewogICAgICAgICAgICAgCiAgICAgICAgICAgICB2YXIgZG9uZSA9IGZhbHNlOwogICAgICAgICAgICAgdmFyIHNjciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICAgCiAgICAgICAgICAgICBzY3Iub25sb2FkID0gaGFuZGxlTG9hZDsKICAgICAgICAgICAgIHNjci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVSZWFkeVN0YXRlQ2hhbmdlOwogICAgICAgICAgICAgc2NyLm9uZXJyb3IgPSBoYW5kbGVFcnJvcjsKICAgICAgICAgICAgIHNjci5zcmMgPSBwYXRoOwogICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3IpOwogICAgICAgICAgICAgCiAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVMb2FkKCkgewogICAgICAgICAgICAgaWYgKCFkb25lKSB7CiAgICAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgICAgIGNhbGxiYWNrKHBhdGgsICJvayIpOwogICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgICAgCiAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZWFkeVN0YXRlQ2hhbmdlKCkgewogICAgICAgICAgICAgdmFyIHN0YXRlOwogICAgICAgICAgICAgCiAgICAgICAgICAgICBpZiAoIWRvbmUpIHsKICAgICAgICAgICAgIHN0YXRlID0gc2NyLnJlYWR5U3RhdGU7CiAgICAgICAgICAgICBpZiAoc3RhdGUgPT09ICJjb21wbGV0ZSIpIHsKICAgICAgICAgICAgIGhhbmRsZUxvYWQoKTsKICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkgewogICAgICAgICAgICAgaWYgKCFkb25lKSB7CiAgICAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgICAgIGNhbGxiYWNrKHBhdGgsICJlcnJvciIpOwogICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgICAgCiAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+Cgo=";
NSString * const kLoopMeResourceBase64Unmute = @"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";
extern NSString * const kLoopMeResourceBase64Skip = @"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABigAwAEAAAAAQAAABgAAAAAEQ8YrgAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAABWFJREFUSA2FVVssXWkU3nufw3Gp6umpQx+azNAR1ZoORpiOoYhLM2Mog6DRlgedB8k8SqTFXGqCNy9G8EZcQiaMksatNNS4NjMlBNN0XoRyctydnuPM921nm6MjmZXsvde/bv//r7W+tUXhvyRBdGgT6wIDA30TExO9fXx8LoBcKH/79u3u4uLiek9Pz/L4+Pg8ROuUl5SUSHgUX4oEUX7bXlarVQRZsXS/f//+zaysrGt+fn5n9Hr9oaOjoxly6kiiyWRSYyNpdnZ2p62t7VV1dfUg5Aa7GLT7dwM7hX9zc3NiTEyMVqfT7dHIbDY7Go1GFZ5DkODu7i5ptVqLWq02UW8wGJz7+vqMaWlpv2H5h12sow3sBCHDw8NJ4eHhvOY7Os7MzOwhDa9HR0f/HhwcNO7s7AgJCQlnw8LCLuH5ICAgwNXDw2MX9g6wUd+4caMT/KhdTIE5J/kj+I9QlOApnp6e/unu3bupkOtl7ekvjzt37iRPTk4e+7148eIxTK/TnDVRauDe1NT0bUZGBotoGRoaEiMjI3mSSRpiQ6m0tJTsMRUXF7NgSk2u9/b2JiGtPKzY3t5+kJqa+gt4ufhCXl5eMgr2MwI95Mmh+PQ4kiCo7XjlQIrImae0La4jlbzJw83NzbKCgoJvKKdSl56efo0FZc6rqqqmIJugMj8/P6K2trYAbAjXICsKqSKDXOtbW1u/293d/Yhr0Mvy8vLf19bWXNzc3PZv3759BTK9xD739/d3pQULWl9fP0Qe5BgXFxeC23nOzc0l5+bmpkPmgqAWKi9evHgmODhY6+Xl5cY1CbphxNgij5guUVFRVySCiH3OVmS3QLdGAxJ6/x0+JmDhoLKyMqiuru4B1r7UaTQay8HBgQV+MrBaWlp4M8PIyMjy/v6+Bhmx4IAfSkQoQcQ+ZyvS2UZW9DxzLvKLvt/FLbTotBy0ZURjY6NakiTBYrHIdQHg5G9/f/8bpFoERsyXL1/WSTb4Wwmip0+fGhkchTpRTAbCJqyXGRgxoy0T7t27Fw25Cc8JW3Tg9tbWlnwrV1dXjdIBDCCgYIx/KiGQIrfidEzfsUBRKF/GUkja2NhgVJHwRz3OUmHX37KdzYFe6rGxMQ16vK+mpqYPawfoFCzItsCPK2NxAdSbpKWlpXUOLs4Wwl+2OnqJODWdrfge4trOAKMRNg2oVV9OTo4JBRZVKpW8AbpG/kZERFxCLNZPhYm7IXV1dS1zKnJwcbYg4IWj+IKIAA7gHWDoXFRU9GdmZmYN1q+oB5gc0Ekq+MmnBZbYvueADx8nJyfT+vq6GvV4LaE1Fzhy6QRMuGRnZ39BHnQwMDAw09DQYAgKCuoCABsg21SAtrq6uoViG1ZWVuS+p0N8fPzniME0H87Pz+93d3fPUU7EpqAW8qjg4ILoE1lx9NLY8Sc6BnJnZUPw/sDA9+jAR9vb22WFhYUZ9FMctPhpPEhJSXGG7BCDyxobG/sr+Jc0gtP/DburT548Sbl165Y8tzo6OsxJSUkcdqvySGUQUABO8BjBivGUTExM/IDTfQ35eVl7+uvclyDbyUvh92hqaqoMpvKwPB7XUCi/ys8wzxNDQ0M5IswcXJwthD8K9gYo3eY+bEV2CwrqjZy7e3p68s+nwiR2RL26wQ8pMZUUyei19f/HSNdXGFRn0W50FDhbgHTxvV+mld0CtRUt7PTs2bMd4KgHa3kS0490vAEXyq5gz2Oe38TIvcqpyMHF2UIbhdjnuKF6YWFhr7Ozc76iomIAulW7GLLpiQ0oYd7wKFjXR0dH++FP5e3r66vjbKENTmxaXl7eeP78+V/A0RxEK5S/50uR8A8Kbc7ppxOntQAAAABJRU5ErkJggg==";
extern NSString * const kLoopMeResourceBase64Replay = @"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";
extern NSString * const kLoopMeResourceBase64Mute = @"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";
extern NSString * const kLoopMeResourceBase64Close = @"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";
extern NSString * const kLoopMeResourceBase64Ad = @"PGh0bWw+CjxoZWFkZXI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgo8L2hlYWRlcj4KCjxib2R5IHN0eWxlPSJtYXJnaW46MCI+CiAgICA8c2NyaXB0IHNyYz0iaHRtbC9pb3MvTG9vcE1lVUkuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0bWwvaW9zL3ZwYWlkLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSclQCc+PC9zY3JpcHQ+CiAgICA8dmlkZW8gc3R5bGU9InBvc2l0aW9uOmFic29sdXRlOyB3aWR0aDoxMDAlJTsgaGVpZ2h0OjEwMCUlOyB6LWluZGV4OjE7IiBpZD0ibG9vcG1lLXZpZGVvc2xvdCIgd2Via2l0LXBsYXlzaW5saW5lCiAgICAgICAgcGxheXNpbmxpbmU+CiAgICA8L3ZpZGVvPgogICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjEwMCUlOyBoZWlnaHQ6MTAwJSU7IHotaW5kZXg6IDI7IC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IiBpZD0ibG9vcG1lLXNsb3QiPgogICAgPC9kaXY+CjwvYm9keT4KCjwvaHRtbD4K";
