// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LoopMeUnitedSDK
import Foundation
import OMSDK_Loopme
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ProgressEvent : Swift.Hashable {
  public static func == (lhs: LoopMeUnitedSDK.ProgressEvent, rhs: LoopMeUnitedSDK.ProgressEvent) -> Swift.Bool
  public var link: Swift.String
  public var offset: Foundation.TimeInterval
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LoopMeOMIDVideoEvents {
}
@objc(LoopMeOMIDVideoEventsWrapper) public class OMIDVideoEventsWrapper : ObjectiveC.NSObject {
  @objc public init(session: OMSDK_Loopme.OMIDLoopmeAdSession) throws
  @objc public func loaded(with vastProperties: OMSDK_Loopme.OMIDLoopmeVASTProperties)
  @objc public func start(withDuration duration: CoreFoundation.CGFloat, videoPlayerVolume: CoreFoundation.CGFloat)
  @objc public func firstQuartile()
  @objc public func midpoint()
  @objc public func thirdQuartile()
  @objc public func complete()
  @objc public func pause()
  @objc public func resume()
  @objc public func skipped()
  @objc public func volumeChange(to playerVolume: CoreFoundation.CGFloat)
  @objc public func adUserInteraction(withType interactionType: OMSDK_Loopme.OMIDInteractionType)
  @objc deinit
}
@objc public class AdSessionContextResult : ObjectiveC.NSObject {
  @objc public var context: OMSDK_Loopme.OMIDLoopmeAdSessionContext?
  @objc public var error: (any Swift.Error)?
  @objc public init(context: OMSDK_Loopme.OMIDLoopmeAdSessionContext?, error: (any Swift.Error)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LoopMeOMIDWrapper) public class OMSDKWrapper : ObjectiveC.NSObject {
  @objc public static var isReady: Swift.Bool
  @objc public static func initOMID(completionBlock: @escaping (Swift.Bool) -> Swift.Void) -> Swift.Bool
  @objc public func injectScriptContentIntoHTML(_ htmlString: Swift.String) throws -> Swift.String
  @objc public func contextForHTML(_ webView: WebKit.WKWebView) throws -> OMSDK_Loopme.OMIDLoopmeAdSessionContext
  @objc public func contextForNativeVideo(_ resources: [LoopMeUnitedSDK.AdVerificationWrapper]) -> LoopMeUnitedSDK.AdSessionContextResult
  @objc public func toOmidResources(_ resources: [LoopMeUnitedSDK.AdVerificationWrapper]) -> [OMSDK_Loopme.OMIDLoopmeVerificationScriptResource]
  @objc public func configurationFor(_ creativeType: OMSDK_Loopme.OMIDCreativeType) throws -> OMSDK_Loopme.OMIDLoopmeAdSessionConfiguration
  @objc public func sessionFor(_ configuration: OMSDK_Loopme.OMIDLoopmeAdSessionConfiguration, context: OMSDK_Loopme.OMIDLoopmeAdSessionContext) throws -> OMSDK_Loopme.OMIDLoopmeAdSession
  @objc public func sessionForHTML(_ webView: WebKit.WKWebView) throws -> OMSDK_Loopme.OMIDLoopmeAdSession
  @objc public func sessionForNativeVideo(_ resources: [LoopMeUnitedSDK.AdVerificationWrapper]) throws -> OMSDK_Loopme.OMIDLoopmeAdSession
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VastProperties : ObjectiveC.NSObject {
  public var adId: Swift.String?
  public var duration: Swift.Double
  public var skipOffset: LoopMeUnitedSDK.VastSkipOffset
  public var adTagURI: Swift.String?
  public var isWrapper: Swift.Bool
  public func append(vastProperties: LoopMeUnitedSDK.VastProperties)
  @objc override dynamic public init()
  @objc deinit
}
extension LoopMeUnitedSDK.VastProperties : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCDATA CDATABlock: Foundation.Data)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
@_inheritsConvenienceInitializers @objc(LoopMeCCPATools) public class CCPATools : ObjectiveC.NSObject {
  @objc public static var ccpaString: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ErrorInfoKey : Swift.Int {
  case appKey
  case classKey
  case url
  case creativeType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(LoopMeVASTEventType) public enum VASTEventType : Swift.Int {
  case impression
  case linearStart
  case linearFirstQuartile
  case linearMidpoint
  case linearThirdQuartile
  case linearComplete
  case linearClose
  case linearPause
  case linearResume
  case linearExpand
  case linearCollapse
  case linearSkip
  case linearMute
  case linearUnmute
  case linearProgress
  case linearClickTracking
  case companionCreativeView
  case companionClickTracking
  case viewable
  case notViewable
  case viewUndetermined
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SDKUtility : ObjectiveC.NSObject {
  @objc public static func loopmeSDKVersionString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserAgent : ObjectiveC.NSObject {
  @objc public static var defaultUserAgent: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct AssetLinks : Swift.Equatable {
  public static func == (lhs: LoopMeUnitedSDK.AssetLinks, rhs: LoopMeUnitedSDK.AssetLinks) -> Swift.Bool
}
@objc(LoopMeServerCommunicator) open class ServerCommunicator : ObjectiveC.NSObject {
  weak public var delegate: (any LoopMeUnitedSDK.LoopMeServerCommunicatorDelegate)?
  public var isLoading: Swift.Bool {
    get
  }
  @objc public var appKey: Swift.String?
  @objc public init(delegate: (any LoopMeUnitedSDK.LoopMeServerCommunicatorDelegate)?)
  @objc public func load(url: Foundation.URL, requestBody: Foundation.Data?, method: Swift.String?)
  @objc public func cancel()
  @objc deinit
}
@objc public protocol LoopMeServerCommunicatorDelegate : ObjectiveC.NSObjectProtocol {
  @objc func serverCommunicator(_ communicator: LoopMeUnitedSDK.ServerCommunicator, didReceive adConfiguration: LoopMeUnitedSDK.AdConfigurationWrapper)
  @objc func serverCommunicator(_ communicator: LoopMeUnitedSDK.ServerCommunicator, didFailWith error: (any Swift.Error)?)
  @objc func serverCommunicatorDidReceiveAd(_ communicator: LoopMeUnitedSDK.ServerCommunicator)
}
public let LOOPME_USERDEFAULTS_KEY_AUTOLOADING: Swift.String
public struct SKAdNetworkFidelity : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SKAdNetworkInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdConfiguration {
  public var vastProperties: LoopMeUnitedSDK.VastProperties?
}
extension LoopMeUnitedSDK.AdConfiguration : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc(LoopMeTimeOffsetType) public enum TimeOffsetType : Swift.Int {
  case percent
  case seconds
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VastSkipOffset : Swift.Equatable {
  public static func == (lhs: LoopMeUnitedSDK.VastSkipOffset, rhs: LoopMeUnitedSDK.VastSkipOffset) -> Swift.Bool
}
@objc(LoopMeAdOrientation) public enum AdOrientationWrapper : Swift.Int {
  case undefined
  case portrait
  case landscape
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(LoopMeCreativeType) public enum CreativeTypeWrapper : Swift.Int {
  case vpaid
  case vast
  case normal
  case mraid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(LoopMeAdConfiguration) public class AdConfigurationWrapper : ObjectiveC.NSObject {
  public init(adConfiguration: LoopMeUnitedSDK.AdConfiguration)
  @objc public var appKey: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isRewarded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var placement: Swift.String
  @objc public var adId: Swift.String {
    @objc get
  }
  @objc public var debug: Swift.Bool {
    @objc get
  }
  @objc public var preload25: Swift.Bool {
    @objc get
  }
  @objc public var adOrientation: LoopMeUnitedSDK.AdOrientationWrapper {
    @objc get
    @objc set
  }
  @objc public var creativeType: LoopMeUnitedSDK.CreativeTypeWrapper {
    @objc get
  }
  @objc public var creativeContent: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isPortrait: Swift.Bool {
    @objc get
  }
  @objc public var skadSignature: Swift.String? {
    @objc get
  }
  @objc public var skadNonce: Swift.String? {
    @objc get
  }
  @objc public var skadNetwork: Swift.String? {
    @objc get
  }
  @objc public var skadVersion: Swift.String? {
    @objc get
  }
  @objc public var skadTimestamp: Foundation.NSNumber? {
    @objc get
  }
  @objc public var skadSourceApp: Foundation.NSNumber? {
    @objc get
  }
  @objc public var skadItunesitem: Foundation.NSNumber? {
    @objc get
  }
  @objc public var skadCampaign: Foundation.NSNumber? {
    @objc get
  }
  @objc public var skadSourceidentifier: Foundation.NSNumber? {
    @objc get
  }
  @objc public var expandProperties: LoopMeUnitedSDK.MRAIDExpandPropertiesWrapper?
  @objc public var vastProperties: LoopMeUnitedSDK.VastPropertiesWrapper?
  public var skadNetworkInfo: LoopMeUnitedSDK.SKAdNetworkInfo?
  @objc public var allowOrientationChange: Swift.Bool
  @objc public func toDictionary() -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc(LoopMeVASTEventTracker) public class VastEventTrackerWrapper : ObjectiveC.NSObject {
  @objc public init(trackingLinks: LoopMeUnitedSDK.AdTrackingLinksWrapper)
  @objc public func trackEvent(_ event: LoopMeUnitedSDK.VASTEventType)
  @objc public func trackErrorCode(_ code: Swift.Int)
  @objc public func trackAdVerificationNonExecuted()
  @objc public func setCurrentTime(_ currentTime: Foundation.TimeInterval)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeProgressEvent) public class ProgressEventWrappper : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeVastProperties) public class VastPropertiesWrapper : ObjectiveC.NSObject {
  @objc public var adId: Swift.String? {
    @objc get
  }
  @objc public var duration: Foundation.TimeInterval {
    @objc get
  }
  @objc public var skipOffset: LoopMeUnitedSDK.VastSkipOffsetWrapper {
    @objc get
  }
  @objc public var trackingLinks: LoopMeUnitedSDK.AdTrackingLinksWrapper {
    @objc get
  }
  @objc public var assetLinks: LoopMeUnitedSDK.AssetLinksWrapper {
    @objc get
  }
  @objc public var adVerifications: [LoopMeUnitedSDK.AdVerificationWrapper] {
    @objc get
  }
  @objc public var isVpaid: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeAdTrackingLinks) public class AdTrackingLinksWrapper : ObjectiveC.NSObject {
  @objc public var errorTemplates: Swift.Set<Swift.String> {
    @objc get
  }
  @objc public var impression: Swift.Set<Swift.String> {
    @objc get
  }
  @objc public var clickVideo: Swift.String {
    @objc get
  }
  @objc public var clickCompanion: Swift.String {
    @objc get
  }
  @objc public var viewableImpression: LoopMeUnitedSDK.ViewableImpressionWrapper {
    @objc get
  }
  @objc public var linear: LoopMeUnitedSDK.LinearTrackingWrapper {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeVastSkipOffset) public class VastSkipOffsetWrapper : ObjectiveC.NSObject {
  @objc public static func initWith30Second() -> LoopMeUnitedSDK.VastSkipOffsetWrapper
  @objc public static func initWith5Second() -> LoopMeUnitedSDK.VastSkipOffsetWrapper
  @objc public var value: Swift.Double {
    @objc get
  }
  @objc public var type: LoopMeUnitedSDK.TimeOffsetType {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeAssetLinks) public class AssetLinksWrapper : ObjectiveC.NSObject {
  @objc public var videoURL: [Swift.String] {
    @objc get
  }
  @objc public var vpaidURL: Swift.String {
    @objc get
  }
  @objc public var adParameters: Swift.String {
    @objc get
  }
  @objc public var endCard: Swift.Array<Swift.String> {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeAdVerification) public class AdVerificationWrapper : ObjectiveC.NSObject {
  @objc public var vendor: Swift.String {
    @objc get
  }
  @objc public var jsResource: Swift.String {
    @objc get
  }
  @objc public var verificationParameters: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeViewableImpression) public class ViewableImpressionWrapper : ObjectiveC.NSObject {
  public var viewable: Swift.Set<Swift.String> {
    get
  }
  public var notViewable: Swift.Set<Swift.String> {
    get
  }
  public var viewUndetermined: Swift.Set<Swift.String> {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeLinearTracking) public class LinearTrackingWrapper : ObjectiveC.NSObject {
  public var start: Swift.Set<Swift.String> {
    get
  }
  public var firstQuartile: Swift.Set<Swift.String> {
    get
  }
  public var midpoint: Swift.Set<Swift.String> {
    get
  }
  public var thirdQuartile: Swift.Set<Swift.String> {
    get
  }
  public var complete: Swift.Set<Swift.String> {
    get
  }
  public var mute: Swift.Set<Swift.String> {
    get
  }
  public var unmute: Swift.Set<Swift.String> {
    get
  }
  public var pause: Swift.Set<Swift.String> {
    get
  }
  public var resume: Swift.Set<Swift.String> {
    get
  }
  public var fullscreen: Swift.Set<Swift.String> {
    get
  }
  public var exitFullscreen: Swift.Set<Swift.String> {
    get
  }
  public var skip: Swift.Set<Swift.String> {
    get
  }
  public var close: Swift.Set<Swift.String> {
    get
  }
  public var progress: Swift.Set<LoopMeUnitedSDK.ProgressEvent> {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(LoopMeProgressEventTracker) public class ProgressEventTrackerWrapper : ObjectiveC.NSObject {
  public var link: Swift.String {
    get
  }
  public var offset: Foundation.TimeInterval {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LoopMeMRAIDExpandProperties) public class MRAIDExpandPropertiesWrapper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var width: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var height: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var useCustomClose: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LoopMeCOPPATools) public class CoppaTools : ObjectiveC.NSObject {
  @objc public static var coppa: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public struct AdVerification : Swift.Equatable {
  public static func == (lhs: LoopMeUnitedSDK.AdVerification, rhs: LoopMeUnitedSDK.AdVerification) -> Swift.Bool
  public static var empty: LoopMeUnitedSDK.AdVerification
  public var vendor: Swift.String
  public var jsResource: Swift.String
  public var verificationParameters: Swift.String
}
extension LoopMeUnitedSDK.ErrorInfoKey : Swift.Equatable {}
extension LoopMeUnitedSDK.ErrorInfoKey : Swift.Hashable {}
extension LoopMeUnitedSDK.ErrorInfoKey : Swift.RawRepresentable {}
extension LoopMeUnitedSDK.VASTEventType : Swift.Equatable {}
extension LoopMeUnitedSDK.VASTEventType : Swift.Hashable {}
extension LoopMeUnitedSDK.VASTEventType : Swift.RawRepresentable {}
extension LoopMeUnitedSDK.TimeOffsetType : Swift.Equatable {}
extension LoopMeUnitedSDK.TimeOffsetType : Swift.Hashable {}
extension LoopMeUnitedSDK.TimeOffsetType : Swift.RawRepresentable {}
extension LoopMeUnitedSDK.AdOrientationWrapper : Swift.Equatable {}
extension LoopMeUnitedSDK.AdOrientationWrapper : Swift.Hashable {}
extension LoopMeUnitedSDK.AdOrientationWrapper : Swift.RawRepresentable {}
extension LoopMeUnitedSDK.CreativeTypeWrapper : Swift.Equatable {}
extension LoopMeUnitedSDK.CreativeTypeWrapper : Swift.Hashable {}
extension LoopMeUnitedSDK.CreativeTypeWrapper : Swift.RawRepresentable {}
